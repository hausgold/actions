name: Continuous Integration Preparation
description: Setup the virtual environment we run in
inputs:
  settings:
    description: The name of the application to fetch settings for
    required: false
  target:
    description: The name of the target to run
    required: true
  clone_token:
    description: The Github token to use for cloning
    required: true
  settings_secret_key:
    description: When settings should be loaded,
      we require the secret key for decryption
    required: false
branding:
  icon: 'check-circle'
  color: 'green'
runs:
  using: 'composite'
  steps:
    # Checkout the application code to the current working directory
    - uses: actions/checkout@v4

    # Run our CI preparations
    - run: node dist/index.js
      shell: bash
      working-directory: '${{ github.action_path }}'
      env:
        INPUT_SETTINGS: '${{ inputs.settings }}'
        INPUT_TARGET: '${{ inputs.target }}'
        INPUT_CLONE_TOKEN: '${{ inputs.clone_token }}'
        INPUT_SETTINGS_SECRET_KEY: '${{ inputs.settings_secret_key }}'

    # Cache common application dependencies for shared container image
    # application workloads
    - uses: actions/cache@v4
      if: inputs.target == 'ci/docker-app'
      with:
        key: node-modules-${{ hashFiles('package-lock.json', 'yarn.lock') }}
        restore-keys: node-modules-
        path: |
          node_modules
          config/container/.node-gyp
          config/container/.npm

    # Cache common application dependencies for serverless application workloads
    - uses: actions/cache@v4
      if: inputs.target == 'ci/docker-app'
      with:
        key: ruby-gems-${{ hashFiles('Gemfile.lock') }}
        restore-keys: ruby-gems-
        path: |
          vendor/bundle
